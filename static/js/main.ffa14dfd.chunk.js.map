{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","each","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6UAaaA,G,YAAO,SAACC,GAAD,OAChB,yBAAKC,UAAU,kBACX,yBACIC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEP,4BAAKL,EAAMI,QAAQE,MACnB,+BAAKN,EAAMI,QAAQG,UCDdC,EAAW,SAACR,GAAD,OACpB,yBAAKC,UAAW,aACXD,EAAMS,SAASC,KAAI,SAAAC,GAAI,OACpB,kBAAC,EAAD,CAAMC,IAAKD,EAAKN,GAAID,QAASO,SCZ5BE,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAYC,EAAf,EAAeA,aAAf,OACrB,2BACId,UAAU,SACVe,KAAK,SACLF,YAAaA,EACbG,SAAWF,MCgCJG,G,wDAvCb,aAAc,IAAD,8BACX,gBAgBDH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAfvC,EAAKC,MAAQ,CACXf,SAAU,GACVY,YAAY,IALH,E,gEAQQ,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACX,SAASoB,S,+BAU/B,IAAD,EAC0BC,KAAKN,MAA9Bf,EADD,EACCA,SAASY,EADV,EACUA,YACVU,EAAmBtB,EAASuB,QAAO,SAAA5B,GAAO,OAC9CA,EAAQE,KAAK2B,cAAcC,SAASb,EAAYY,kBAElD,OACE,yBAAKhC,UAAY,OACf,gDACA,kBAAC,EAAD,CACEa,YAAY,kBACZC,aAAce,KAAKf,eAErB,kBAAC,EAAD,CAAUN,SAAUsB,S,GAlCVI,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ffa14dfd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\n/* What's happening here? \r\n 1. The <Card/> component is styled with 'card-container'\r\n 2. The function returns a div containing an image and name\r\n 3. In order for the image to work, the <Card/> component  will needs a \r\n    \"monster\" attribute attached to prop that is an object and has\r\n    an \"id\" attribute.\r\n4. In order for the <h1> to work, <Card/> will need to be supplied with \r\n    a prop attribute called monster that is an object and contains a name\r\n\r\n*/\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img \r\n            alt=\"monster\" \r\n            src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n        />\r\n        <h2>{props.monster.name}</h2>\r\n        <p> {props.monster.email}</p>\r\n    </div>\r\n)","import React from 'react'\r\nimport './card-list.styles.css'\r\nimport { Card } from '../card/card.component'\r\n\r\n/* Here's how this function works: \r\n1. The CardList function will return a div styled with 'card-list' class\r\n    when <CardList/> is called somewhere else\r\n2. Within that div returned by <CardList/>, we will run some JavaScript\r\n3. That JavaScript will add a property called \"monsters\" to the prop object\r\n    of <CardList/>\r\n4. It will then be the responsibility of whatever calls <CardList/> \r\n    to provide a \"monsters\" variable, in this case a list, to the \r\n    prop object of <CardList/>\r\n5. This CardList fx will take the list provided and map it or loop through it\r\n6. For each item in the monster list, the <Card/> component is called\r\n    6a. The <Card/> component blueprint is in card/card.componenet.jsx\r\n    6b. <Card/> is designed to accept a \"monster\"\" value and then to print the \r\n        .name property of the monster value\r\n*/\r\nexport const CardList = (props) => (\r\n    <div className ='card-list'>\r\n        {props.monsters.map(each=>(\r\n            <Card key={each.id} monster={each}/>\r\n        ))}\r\n    </div>\r\n    //for children: return <div className='card-list'>{props.children}</div>\r\n);\r\n\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\n/*What's going on? \r\n    1. You can destructure props by using {} in leiu of props var\r\n    2. You must supply a placeholder/onChange props to run this fx\r\n    3. OnChange uses an event object that must be drilled down in \r\n        order to get the value of input. e.target.value\r\n*/\r\n\r\nexport const SearchBox = ({ placeholder,handleChange })=>(\r\n    <input \r\n        className='search'\r\n        type='search' \r\n        placeholder={placeholder}\r\n        onChange= {handleChange}\r\n    />\r\n);","import React, {Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component'\nimport {SearchBox} from './components/search-box/search-box.component'\n\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField:''\n    };\n  }\n   componentDidMount(){\n     fetch('https://jsonplaceholder.typicode.com/users')\n     .then(response => response.json())\n     .then(users=>this.setState({monsters:users}))\n   }\n\n   /*normally you need to bind functions with a 'this' component in the \n   constructor method. Arrow functions auto bind to the place where 'this' is\n   first declared, in our case in the App class*/\n   handleChange = e=>{\n     this.setState({ searchField: e.target.value });\n   };\n  //We will use props and no children to populate monster list\n  render(){\n    const {monsters,searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster=>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n    return (\n      <div className = 'App'>\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder='search monsters'\n          handleChange={this.handleChange}\n        />        \n        <CardList monsters={filteredMonsters}/>        \n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}